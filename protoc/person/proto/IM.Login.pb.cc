// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: IM.Login.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "IM.Login.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace IM {
namespace Login {

void protobuf_ShutdownFile_IM_2eLogin_2eproto() {
  delete Phone::default_instance_;
  delete Book::default_instance_;
  delete Person::default_instance_;
  delete TInt32::default_instance_;
  delete TString::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_IM_2eLogin_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_IM_2eLogin_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_IM_2eLogin_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::IM::BaseDefine::protobuf_AddDesc_IM_2eBaseDefine_2eproto();
  Phone::default_instance_ = new Phone();
  Book::default_instance_ = new Book();
  Person::default_instance_ = new Person();
  TInt32::default_instance_ = new TInt32();
  TString::default_instance_ = new TString();
  Phone::default_instance_->InitAsDefaultInstance();
  Book::default_instance_->InitAsDefaultInstance();
  Person::default_instance_->InitAsDefaultInstance();
  TInt32::default_instance_->InitAsDefaultInstance();
  TString::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_IM_2eLogin_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_IM_2eLogin_2eproto_once_);
void protobuf_AddDesc_IM_2eLogin_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_IM_2eLogin_2eproto_once_,
                 &protobuf_AddDesc_IM_2eLogin_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_IM_2eLogin_2eproto {
  StaticDescriptorInitializer_IM_2eLogin_2eproto() {
    protobuf_AddDesc_IM_2eLogin_2eproto();
  }
} static_descriptor_initializer_IM_2eLogin_2eproto_;
#endif

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Phone::kNumberFieldNumber;
const int Phone::kPhoneTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Phone::Phone()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Login.Phone)
}

void Phone::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Phone::Phone(const Phone& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Login.Phone)
}

void Phone::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  phone_type_ = 0;
}

Phone::~Phone() {
  // @@protoc_insertion_point(destructor:IM.Login.Phone)
  SharedDtor();
}

void Phone::SharedDtor() {
  number_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Phone::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Phone& Phone::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eLogin_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eLogin_2eproto();
#endif
  return *default_instance_;
}

Phone* Phone::default_instance_ = NULL;

Phone* Phone::New(::google::protobuf::Arena* arena) const {
  Phone* n = new Phone;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Phone::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Login.Phone)
  number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  phone_type_ = 0;
}

bool Phone::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:IM.Login.Phone)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string number = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_number()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->number().data(), this->number().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "IM.Login.Phone.number"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_phone_type;
        break;
      }

      // optional .IM.BaseDefine.PhoneType phone_type = 2;
      case 2: {
        if (tag == 16) {
         parse_phone_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_phone_type(static_cast< ::IM::BaseDefine::PhoneType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Login.Phone)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Login.Phone)
  return false;
#undef DO_
}

void Phone::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Login.Phone)
  // optional string number = 1;
  if (this->number().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->number().data(), this->number().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "IM.Login.Phone.number");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->number(), output);
  }

  // optional .IM.BaseDefine.PhoneType phone_type = 2;
  if (this->phone_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->phone_type(), output);
  }

  // @@protoc_insertion_point(serialize_end:IM.Login.Phone)
}

int Phone::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Login.Phone)
  int total_size = 0;

  // optional string number = 1;
  if (this->number().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->number());
  }

  // optional .IM.BaseDefine.PhoneType phone_type = 2;
  if (this->phone_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->phone_type());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Phone::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Phone*>(&from));
}

void Phone::MergeFrom(const Phone& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.Login.Phone)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.number().size() > 0) {

    number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.number_);
  }
  if (from.phone_type() != 0) {
    set_phone_type(from.phone_type());
  }
}

void Phone::CopyFrom(const Phone& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Login.Phone)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Phone::IsInitialized() const {

  return true;
}

void Phone::Swap(Phone* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Phone::InternalSwap(Phone* other) {
  number_.Swap(&other->number_);
  std::swap(phone_type_, other->phone_type_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Phone::GetTypeName() const {
  return "IM.Login.Phone";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Phone

// optional string number = 1;
void Phone::clear_number() {
  number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Phone::number() const {
  // @@protoc_insertion_point(field_get:IM.Login.Phone.number)
  return number_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Phone::set_number(const ::std::string& value) {
  
  number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.Login.Phone.number)
}
 void Phone::set_number(const char* value) {
  
  number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.Login.Phone.number)
}
 void Phone::set_number(const char* value, size_t size) {
  
  number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.Login.Phone.number)
}
 ::std::string* Phone::mutable_number() {
  
  // @@protoc_insertion_point(field_mutable:IM.Login.Phone.number)
  return number_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Phone::release_number() {
  // @@protoc_insertion_point(field_release:IM.Login.Phone.number)
  
  return number_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Phone::set_allocated_number(::std::string* number) {
  if (number != NULL) {
    
  } else {
    
  }
  number_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), number);
  // @@protoc_insertion_point(field_set_allocated:IM.Login.Phone.number)
}

// optional .IM.BaseDefine.PhoneType phone_type = 2;
void Phone::clear_phone_type() {
  phone_type_ = 0;
}
 ::IM::BaseDefine::PhoneType Phone::phone_type() const {
  // @@protoc_insertion_point(field_get:IM.Login.Phone.phone_type)
  return static_cast< ::IM::BaseDefine::PhoneType >(phone_type_);
}
 void Phone::set_phone_type(::IM::BaseDefine::PhoneType value) {
  
  phone_type_ = value;
  // @@protoc_insertion_point(field_set:IM.Login.Phone.phone_type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Book::kNameFieldNumber;
const int Book::kPriceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Book::Book()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Login.Book)
}

void Book::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Book::Book(const Book& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Login.Book)
}

void Book::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  price_ = 0;
}

Book::~Book() {
  // @@protoc_insertion_point(destructor:IM.Login.Book)
  SharedDtor();
}

void Book::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Book::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Book& Book::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eLogin_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eLogin_2eproto();
#endif
  return *default_instance_;
}

Book* Book::default_instance_ = NULL;

Book* Book::New(::google::protobuf::Arena* arena) const {
  Book* n = new Book;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Book::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Login.Book)
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  price_ = 0;
}

bool Book::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:IM.Login.Book)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "IM.Login.Book.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_price;
        break;
      }

      // optional float price = 2;
      case 2: {
        if (tag == 21) {
         parse_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &price_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Login.Book)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Login.Book)
  return false;
#undef DO_
}

void Book::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Login.Book)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "IM.Login.Book.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional float price = 2;
  if (this->price() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->price(), output);
  }

  // @@protoc_insertion_point(serialize_end:IM.Login.Book)
}

int Book::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Login.Book)
  int total_size = 0;

  // optional string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional float price = 2;
  if (this->price() != 0) {
    total_size += 1 + 4;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Book::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Book*>(&from));
}

void Book::MergeFrom(const Book& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.Login.Book)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.price() != 0) {
    set_price(from.price());
  }
}

void Book::CopyFrom(const Book& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Login.Book)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Book::IsInitialized() const {

  return true;
}

void Book::Swap(Book* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Book::InternalSwap(Book* other) {
  name_.Swap(&other->name_);
  std::swap(price_, other->price_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Book::GetTypeName() const {
  return "IM.Login.Book";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Book

// optional string name = 1;
void Book::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Book::name() const {
  // @@protoc_insertion_point(field_get:IM.Login.Book.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Book::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.Login.Book.name)
}
 void Book::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.Login.Book.name)
}
 void Book::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.Login.Book.name)
}
 ::std::string* Book::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:IM.Login.Book.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Book::release_name() {
  // @@protoc_insertion_point(field_release:IM.Login.Book.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Book::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:IM.Login.Book.name)
}

// optional float price = 2;
void Book::clear_price() {
  price_ = 0;
}
 float Book::price() const {
  // @@protoc_insertion_point(field_get:IM.Login.Book.price)
  return price_;
}
 void Book::set_price(float value) {
  
  price_ = value;
  // @@protoc_insertion_point(field_set:IM.Login.Book.price)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Person::kNameFieldNumber;
const int Person::kAgeFieldNumber;
const int Person::kLanguagesFieldNumber;
const int Person::kPhoneFieldNumber;
const int Person::kBooksFieldNumber;
const int Person::kVipFieldNumber;
const int Person::kAddressFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Person::Person()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Login.Person)
}

void Person::InitAsDefaultInstance() {
  _is_default_instance_ = true;
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  phone_ = const_cast< ::IM::Login::Phone*>(
      ::IM::Login::Phone::internal_default_instance());
#else
  phone_ = const_cast< ::IM::Login::Phone*>(&::IM::Login::Phone::default_instance());
#endif
}

Person::Person(const Person& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Login.Person)
}

void Person::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  age_ = 0;
  phone_ = NULL;
  vip_ = false;
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Person::~Person() {
  // @@protoc_insertion_point(destructor:IM.Login.Person)
  SharedDtor();
}

void Person::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete phone_;
  }
}

void Person::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Person& Person::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eLogin_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eLogin_2eproto();
#endif
  return *default_instance_;
}

Person* Person::default_instance_ = NULL;

Person* Person::New(::google::protobuf::Arena* arena) const {
  Person* n = new Person;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Person::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Login.Person)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Person, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Person*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(age_, vip_);
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && phone_ != NULL) delete phone_;
  phone_ = NULL;
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

  languages_.Clear();
  books_.Clear();
}

bool Person::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:IM.Login.Person)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "IM.Login.Person.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_age;
        break;
      }

      // optional int32 age = 2;
      case 2: {
        if (tag == 16) {
         parse_age:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &age_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_languages;
        break;
      }

      // repeated string languages = 3;
      case 3: {
        if (tag == 26) {
         parse_languages:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_languages()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->languages(this->languages_size() - 1).data(),
            this->languages(this->languages_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "IM.Login.Person.languages"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_languages;
        if (input->ExpectTag(34)) goto parse_phone;
        break;
      }

      // optional .IM.Login.Phone phone = 4;
      case 4: {
        if (tag == 34) {
         parse_phone:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_phone()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_books;
        break;
      }

      // repeated .IM.Login.Book books = 5;
      case 5: {
        if (tag == 42) {
         parse_books:
          DO_(input->IncrementRecursionDepth());
         parse_loop_books:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_books()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_loop_books;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(48)) goto parse_vip;
        break;
      }

      // optional bool vip = 6;
      case 6: {
        if (tag == 48) {
         parse_vip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &vip_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_address;
        break;
      }

      // optional string address = 7;
      case 7: {
        if (tag == 58) {
         parse_address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_address()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->address().data(), this->address().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "IM.Login.Person.address"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Login.Person)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Login.Person)
  return false;
#undef DO_
}

void Person::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Login.Person)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "IM.Login.Person.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional int32 age = 2;
  if (this->age() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->age(), output);
  }

  // repeated string languages = 3;
  for (int i = 0; i < this->languages_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->languages(i).data(), this->languages(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "IM.Login.Person.languages");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->languages(i), output);
  }

  // optional .IM.Login.Phone phone = 4;
  if (this->has_phone()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, *this->phone_, output);
  }

  // repeated .IM.Login.Book books = 5;
  for (unsigned int i = 0, n = this->books_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->books(i), output);
  }

  // optional bool vip = 6;
  if (this->vip() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->vip(), output);
  }

  // optional string address = 7;
  if (this->address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->address().data(), this->address().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "IM.Login.Person.address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->address(), output);
  }

  // @@protoc_insertion_point(serialize_end:IM.Login.Person)
}

int Person::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Login.Person)
  int total_size = 0;

  // optional string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional int32 age = 2;
  if (this->age() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->age());
  }

  // optional .IM.Login.Phone phone = 4;
  if (this->has_phone()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->phone_);
  }

  // optional bool vip = 6;
  if (this->vip() != 0) {
    total_size += 1 + 1;
  }

  // optional string address = 7;
  if (this->address().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->address());
  }

  // repeated string languages = 3;
  total_size += 1 * this->languages_size();
  for (int i = 0; i < this->languages_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->languages(i));
  }

  // repeated .IM.Login.Book books = 5;
  total_size += 1 * this->books_size();
  for (int i = 0; i < this->books_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->books(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Person::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Person*>(&from));
}

void Person::MergeFrom(const Person& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.Login.Person)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  languages_.MergeFrom(from.languages_);
  books_.MergeFrom(from.books_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.age() != 0) {
    set_age(from.age());
  }
  if (from.has_phone()) {
    mutable_phone()->::IM::Login::Phone::MergeFrom(from.phone());
  }
  if (from.vip() != 0) {
    set_vip(from.vip());
  }
  if (from.address().size() > 0) {

    address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
}

void Person::CopyFrom(const Person& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Login.Person)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Person::IsInitialized() const {

  return true;
}

void Person::Swap(Person* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Person::InternalSwap(Person* other) {
  name_.Swap(&other->name_);
  std::swap(age_, other->age_);
  languages_.UnsafeArenaSwap(&other->languages_);
  std::swap(phone_, other->phone_);
  books_.UnsafeArenaSwap(&other->books_);
  std::swap(vip_, other->vip_);
  address_.Swap(&other->address_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Person::GetTypeName() const {
  return "IM.Login.Person";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Person

// optional string name = 1;
void Person::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Person::name() const {
  // @@protoc_insertion_point(field_get:IM.Login.Person.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Person::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.Login.Person.name)
}
 void Person::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.Login.Person.name)
}
 void Person::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.Login.Person.name)
}
 ::std::string* Person::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:IM.Login.Person.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Person::release_name() {
  // @@protoc_insertion_point(field_release:IM.Login.Person.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Person::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:IM.Login.Person.name)
}

// optional int32 age = 2;
void Person::clear_age() {
  age_ = 0;
}
 ::google::protobuf::int32 Person::age() const {
  // @@protoc_insertion_point(field_get:IM.Login.Person.age)
  return age_;
}
 void Person::set_age(::google::protobuf::int32 value) {
  
  age_ = value;
  // @@protoc_insertion_point(field_set:IM.Login.Person.age)
}

// repeated string languages = 3;
int Person::languages_size() const {
  return languages_.size();
}
void Person::clear_languages() {
  languages_.Clear();
}
 const ::std::string& Person::languages(int index) const {
  // @@protoc_insertion_point(field_get:IM.Login.Person.languages)
  return languages_.Get(index);
}
 ::std::string* Person::mutable_languages(int index) {
  // @@protoc_insertion_point(field_mutable:IM.Login.Person.languages)
  return languages_.Mutable(index);
}
 void Person::set_languages(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:IM.Login.Person.languages)
  languages_.Mutable(index)->assign(value);
}
 void Person::set_languages(int index, const char* value) {
  languages_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Login.Person.languages)
}
 void Person::set_languages(int index, const char* value, size_t size) {
  languages_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Login.Person.languages)
}
 ::std::string* Person::add_languages() {
  // @@protoc_insertion_point(field_add_mutable:IM.Login.Person.languages)
  return languages_.Add();
}
 void Person::add_languages(const ::std::string& value) {
  languages_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:IM.Login.Person.languages)
}
 void Person::add_languages(const char* value) {
  languages_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:IM.Login.Person.languages)
}
 void Person::add_languages(const char* value, size_t size) {
  languages_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:IM.Login.Person.languages)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
Person::languages() const {
  // @@protoc_insertion_point(field_list:IM.Login.Person.languages)
  return languages_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
Person::mutable_languages() {
  // @@protoc_insertion_point(field_mutable_list:IM.Login.Person.languages)
  return &languages_;
}

// optional .IM.Login.Phone phone = 4;
bool Person::has_phone() const {
  return !_is_default_instance_ && phone_ != NULL;
}
void Person::clear_phone() {
  if (GetArenaNoVirtual() == NULL && phone_ != NULL) delete phone_;
  phone_ = NULL;
}
const ::IM::Login::Phone& Person::phone() const {
  // @@protoc_insertion_point(field_get:IM.Login.Person.phone)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return phone_ != NULL ? *phone_ : *default_instance().phone_;
#else
  return phone_ != NULL ? *phone_ : *default_instance_->phone_;
#endif
}
::IM::Login::Phone* Person::mutable_phone() {
  
  if (phone_ == NULL) {
    phone_ = new ::IM::Login::Phone;
  }
  // @@protoc_insertion_point(field_mutable:IM.Login.Person.phone)
  return phone_;
}
::IM::Login::Phone* Person::release_phone() {
  // @@protoc_insertion_point(field_release:IM.Login.Person.phone)
  
  ::IM::Login::Phone* temp = phone_;
  phone_ = NULL;
  return temp;
}
void Person::set_allocated_phone(::IM::Login::Phone* phone) {
  delete phone_;
  phone_ = phone;
  if (phone) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Login.Person.phone)
}

// repeated .IM.Login.Book books = 5;
int Person::books_size() const {
  return books_.size();
}
void Person::clear_books() {
  books_.Clear();
}
const ::IM::Login::Book& Person::books(int index) const {
  // @@protoc_insertion_point(field_get:IM.Login.Person.books)
  return books_.Get(index);
}
::IM::Login::Book* Person::mutable_books(int index) {
  // @@protoc_insertion_point(field_mutable:IM.Login.Person.books)
  return books_.Mutable(index);
}
::IM::Login::Book* Person::add_books() {
  // @@protoc_insertion_point(field_add:IM.Login.Person.books)
  return books_.Add();
}
::google::protobuf::RepeatedPtrField< ::IM::Login::Book >*
Person::mutable_books() {
  // @@protoc_insertion_point(field_mutable_list:IM.Login.Person.books)
  return &books_;
}
const ::google::protobuf::RepeatedPtrField< ::IM::Login::Book >&
Person::books() const {
  // @@protoc_insertion_point(field_list:IM.Login.Person.books)
  return books_;
}

// optional bool vip = 6;
void Person::clear_vip() {
  vip_ = false;
}
 bool Person::vip() const {
  // @@protoc_insertion_point(field_get:IM.Login.Person.vip)
  return vip_;
}
 void Person::set_vip(bool value) {
  
  vip_ = value;
  // @@protoc_insertion_point(field_set:IM.Login.Person.vip)
}

// optional string address = 7;
void Person::clear_address() {
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Person::address() const {
  // @@protoc_insertion_point(field_get:IM.Login.Person.address)
  return address_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Person::set_address(const ::std::string& value) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.Login.Person.address)
}
 void Person::set_address(const char* value) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.Login.Person.address)
}
 void Person::set_address(const char* value, size_t size) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.Login.Person.address)
}
 ::std::string* Person::mutable_address() {
  
  // @@protoc_insertion_point(field_mutable:IM.Login.Person.address)
  return address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Person::release_address() {
  // @@protoc_insertion_point(field_release:IM.Login.Person.address)
  
  return address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Person::set_allocated_address(::std::string* address) {
  if (address != NULL) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:IM.Login.Person.address)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TInt32::kInt1FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TInt32::TInt32()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Login.TInt32)
}

void TInt32::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

TInt32::TInt32(const TInt32& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Login.TInt32)
}

void TInt32::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  int1_ = 0;
}

TInt32::~TInt32() {
  // @@protoc_insertion_point(destructor:IM.Login.TInt32)
  SharedDtor();
}

void TInt32::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void TInt32::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TInt32& TInt32::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eLogin_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eLogin_2eproto();
#endif
  return *default_instance_;
}

TInt32* TInt32::default_instance_ = NULL;

TInt32* TInt32::New(::google::protobuf::Arena* arena) const {
  TInt32* n = new TInt32;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TInt32::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Login.TInt32)
  int1_ = 0;
}

bool TInt32::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:IM.Login.TInt32)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 int1 = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &int1_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Login.TInt32)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Login.TInt32)
  return false;
#undef DO_
}

void TInt32::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Login.TInt32)
  // optional int32 int1 = 1;
  if (this->int1() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->int1(), output);
  }

  // @@protoc_insertion_point(serialize_end:IM.Login.TInt32)
}

int TInt32::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Login.TInt32)
  int total_size = 0;

  // optional int32 int1 = 1;
  if (this->int1() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->int1());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TInt32::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TInt32*>(&from));
}

void TInt32::MergeFrom(const TInt32& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.Login.TInt32)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.int1() != 0) {
    set_int1(from.int1());
  }
}

void TInt32::CopyFrom(const TInt32& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Login.TInt32)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TInt32::IsInitialized() const {

  return true;
}

void TInt32::Swap(TInt32* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TInt32::InternalSwap(TInt32* other) {
  std::swap(int1_, other->int1_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string TInt32::GetTypeName() const {
  return "IM.Login.TInt32";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TInt32

// optional int32 int1 = 1;
void TInt32::clear_int1() {
  int1_ = 0;
}
 ::google::protobuf::int32 TInt32::int1() const {
  // @@protoc_insertion_point(field_get:IM.Login.TInt32.int1)
  return int1_;
}
 void TInt32::set_int1(::google::protobuf::int32 value) {
  
  int1_ = value;
  // @@protoc_insertion_point(field_set:IM.Login.TInt32.int1)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TString::kStr1FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TString::TString()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Login.TString)
}

void TString::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

TString::TString(const TString& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Login.TString)
}

void TString::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  str1_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

TString::~TString() {
  // @@protoc_insertion_point(destructor:IM.Login.TString)
  SharedDtor();
}

void TString::SharedDtor() {
  str1_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void TString::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TString& TString::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eLogin_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eLogin_2eproto();
#endif
  return *default_instance_;
}

TString* TString::default_instance_ = NULL;

TString* TString::New(::google::protobuf::Arena* arena) const {
  TString* n = new TString;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TString::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Login.TString)
  str1_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool TString::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:IM.Login.TString)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string str1 = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_str1()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->str1().data(), this->str1().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "IM.Login.TString.str1"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Login.TString)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Login.TString)
  return false;
#undef DO_
}

void TString::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Login.TString)
  // optional string str1 = 1;
  if (this->str1().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->str1().data(), this->str1().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "IM.Login.TString.str1");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->str1(), output);
  }

  // @@protoc_insertion_point(serialize_end:IM.Login.TString)
}

int TString::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Login.TString)
  int total_size = 0;

  // optional string str1 = 1;
  if (this->str1().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->str1());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TString::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TString*>(&from));
}

void TString::MergeFrom(const TString& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.Login.TString)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.str1().size() > 0) {

    str1_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.str1_);
  }
}

void TString::CopyFrom(const TString& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Login.TString)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TString::IsInitialized() const {

  return true;
}

void TString::Swap(TString* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TString::InternalSwap(TString* other) {
  str1_.Swap(&other->str1_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string TString::GetTypeName() const {
  return "IM.Login.TString";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TString

// optional string str1 = 1;
void TString::clear_str1() {
  str1_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& TString::str1() const {
  // @@protoc_insertion_point(field_get:IM.Login.TString.str1)
  return str1_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TString::set_str1(const ::std::string& value) {
  
  str1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.Login.TString.str1)
}
 void TString::set_str1(const char* value) {
  
  str1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.Login.TString.str1)
}
 void TString::set_str1(const char* value, size_t size) {
  
  str1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.Login.TString.str1)
}
 ::std::string* TString::mutable_str1() {
  
  // @@protoc_insertion_point(field_mutable:IM.Login.TString.str1)
  return str1_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* TString::release_str1() {
  // @@protoc_insertion_point(field_release:IM.Login.TString.str1)
  
  return str1_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TString::set_allocated_str1(::std::string* str1) {
  if (str1 != NULL) {
    
  } else {
    
  }
  str1_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), str1);
  // @@protoc_insertion_point(field_set_allocated:IM.Login.TString.str1)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace Login
}  // namespace IM

// @@protoc_insertion_point(global_scope)
